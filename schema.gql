# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

input BaseQueryInput {
  limit: Int!
  skip: Int!
}

input CreateProjectInput {
  description: CreateProjectTranslationInput!
  imageUrls: [String!]!
  name: String!
  order: Float!
  tags: [String!]!
}

input CreateProjectTranslationInput {
  en: String!
  pl: String!
}

input CreateTagInput {
  bgColor: String!
  fontColor: String!
  name: String!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type Mutation {
  createProject(data: CreateProjectInput!): Project!
  createTag(data: CreateTagInput!): Tag!
  deleteProject(id: ID!): Project!
  deleteTag(id: ID!): Tag!
  deleteUser(id: ID!): User!
  login(email: String!, password: String!): User!
  registerUser(data: RegisterUserInput!): User!
  updateTag(data: UpdateTagInput!, id: ID!): Tag!
  updateUser(data: UpdateUserInput!, id: ID!): User!
}

type PaginatedTagResponse {
  count: Int!
  result: [Tag!]!
}

type PaginatedUserResponse {
  count: Int!
  result: [User!]!
}

type Project {
  creationDate: DateTime!
  description: ProjectTranslations!
  id: ID!
  imageUrls: [String!]!
  name: String!
  order: Int!
  tags: [Tag!]!
}

type ProjectTranslations {
  en: String!
  id: ID!
  pl: String!
}

type Query {
  getProject(id: ID!): Project!
  getTag(id: ID!): Tag!
  queryTags(pagination: BaseQueryInput!): PaginatedTagResponse!
  queryUsers(pagination: BaseQueryInput!): PaginatedUserResponse!
}

input RegisterUserInput {
  email: String!
  firstName: String!
  lastName: String!
  password: String!
  role: Role!
}

"""Roles in the application"""
enum Role {
  ADMINISTRATOR
  ANY
  NONE
  USER
}

type Tag {
  bgColor: String!
  fontColor: String!
  id: ID!
  name: String!
}

input UpdateTagInput {
  bgColor: String
  fontColor: String
  name: String
}

input UpdateUserInput {
  email: String
  firstName: String
  lastName: String
  password: String
  role: Role
}

type User {
  creationDate: DateTime!
  email: String!
  firstName: String!
  id: ID!
  lastName: String!
  role: Role!
}
